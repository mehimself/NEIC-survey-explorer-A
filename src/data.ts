import * as d3 from "d3";

let data = {
    headers: ['Organization', 'Practices addressing ethical challenges', 'Practice supporting communication/publication', 'Share resources (which)', 'CD at MA-level', 'Part of Curriculum', 'General/specialized', 'Other', 'DRM part of existing or separate course', 'Developed own material', 'Who developed it', 'Willingness to share course material', 'Support for DM', 'Online DH training', 'Awareness of following initiative ', 'Willingness to collaborate on resources', 'CD: EDA', 'CD: Statistics', 'CD: Ethics', 'CD: Data rights and protection', 'CD: Interdisciplinary dialogue', 'Interest in HPC', 'Course integrated/separate', 'DRM – Department', 'DRM – Faculty'],
    cardinalities:      [5, 2, 3, 5, 2, 2, 2, 2, 2, 2, 4, 4, 11, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5],
    testSet:            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    contrastSets: [
        {
            name: 'Bland',
            set: [0.3, 1, 2, 0, 1, 0, 1, 0, 1, 0, 3, 3, 10, 1, 4, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0],
            map: []
        },
        {
            name: 'Nightmare',
            set: [0.2, 0, 1, 0.2, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0.2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.2],
            map: []
        },
        {
            name: 'YesWeCan',
            set: [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            map: []
        }
    ],
    packedVariableSets: [
        [0.5, 0.0, 0.5, 0.25, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.3333333333333333, 1.0, 0.3, 1.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.3036287280956326, 0.44464498554508874],
        [0.5, 0.0, 0.0, 0.75, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0948030984650643, 0.5082781561389029],
        [0.5, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.6666666666666666, 0.6, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.09276498005029198, 0.15531593983271266],
        [0.5, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.3333333333333333, 1.0, 0.1, 0.5, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0927649800502922, 0.5414696293881627],
        [0.5, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.6666666666666666, 0.3333333333333333, 0.4, 0.75, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.11574871944111703, 0.6579382393679643],
        [0.5, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.6666666666666666, 0.6666666666666666, 0.8, 0.5, 0.6, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.3333333333333333, 0.6666666666666666, 0.7, 0.5, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.42948678733344825, 0.6939740448106495],
        [0.5, 0.0, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.3333333333333333, 0.6666666666666666, 0.9, 0.5, 0.4, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.28268310711957995, 0.771121717724653],
        [0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.8, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.0, 0.5, 0.5, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.3333333333333333, 0.3333333333333333, 0.8, 0.0, 0.8, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.5604920986739518, 0.503223182726186],
        [0.5, 0.0, 0.0, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.0, 0.5, 0.0, 0.4, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.3992791374987799, 0.22741669183181046],
        [0.5, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.3333333333333333, 0.3, 0.5, 0.2, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4348253463445719, 0.2952527788755059],
        [0.5, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.8, 0.75, 0.8, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2774649176638838, 0.2638313478072562],
        [0.5, 0.0, 0.0, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23149743888223406, 0.5203069952337323],
        [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.7006784402712045, 0.4934834361437465],
        [0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.7, 0.0, 0.6, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.34055788235372725, 0.03259864255613622],
        [0.5, 0.0, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.6666666666666666, 0.8, 0.75, 0.6, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0948030984650643, 0.14742468672438128],
        [1.0, 0.0, 0.0, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.3333333333333333, 0.3333333333333333, 0.5, 0.0, 0.2, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.18552996010058426, 0.5855042803460048],
        [1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.3333333333333333, 0.3333333333333333, 0.7, 0.75, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.2472572678292154, 0.6137678591514517],
        [1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.3333333333333333, 0.8, 0.5, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2705356489081091, 0.3033334572502176],
        [1.0, 1.0, 0.0, 0.75, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.9, 0.0, 0.6, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.32161798236582195, 0.6108778834481275],
        [0.5, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.6666666666666666, 0.6666666666666666, 0.8, 1.0, 0.6, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.252595826840339, 0.21223506880608214],
        [0.25, 1.0, 0.5, 0.25, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.3333333333333333, 0.0, 0.75, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.651530890448631, 0.7293842117770118],
        [0.0, 0.0, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.3333333333333333, 0.8, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.1621312094662631, 0.5130819557797187],
        [0.25, 1.0, 0.5, 0.75, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.6666666666666666, 0.3333333333333333, 1.0, 0.0, 0.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03554620884579198, 0.6787676664995329],
        [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.0, 0.75, 0.4, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.551452943123219, 0.7764445676968486],
        [0.75, 1.0, 0.5, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.2, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.651530890448631, 0.19883154045917506],
        [0.0, 1.0, 0.5, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.3333333333333333, 1.0, 0.1, 0.75, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.6307765763810139, 0.5795885996806859],
        [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.3, 0.75, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.3596173208698824, 0.5003869030305717],
        [0.0, 1.0, 0.5, 0.75, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.3, 0.5, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.4629948777644681, 0.359272852499892],
        [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.8, 0.5, 0.8, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.8766832962245515, 0.3956875084753377],
        [0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.33490739320344454, 0.6905368819241006],
        [1.0, 0.0, 0.5, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.3333333333333333, 0.8, 0.5, 0.8, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.2012897890475656, 0.574068271944299],
        [0.0, 1.0, 0.0, 0.5, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.0, 0.8, 0.75, 0.4, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.5393054849117483, 0.7308292998243768],
        [0.0, 0.0, 0.5, 0.25, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.6, 0.5, 0.8, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.3400222478795075, 0.5782792408919913],
        [0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.6666666666666666, 0.3, 0.75, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0],
        [1.0, 0.0, 0.0, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.1, 0.0, 0.4, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.15202186966956452, 0.9144792172578237],
        [0.25, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.6666666666666666, 0.6666666666666666, 0.8, 0.5, 0.2, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.252251752949851, 0.03259864255613622],
        [0.25, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.75, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.13873245883194185, 0.2264289056103041],
        [0.25, 0.0, 0.0, 0.75, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.6666666666666666, 0.6666666666666666, 0.9, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.66186393458039, 0.5130819557797187],
        [1.0, 0.0, 0.5, 0.75, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.6666666666666666, 0.9, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.9187982425117174, 0.6434765260042639],
        [0.0, 0.0, 0.5, 0.5, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.3333333333333333, 0.9, 0.0, 0.8, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6407655466222851, 0.5782792408919913],
        [0.0, 0.0, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.6, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3618467461930904, 0.7496375110030342],
        [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.3333333333333333, 0.9, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.366337994266131, 0.6757586643251154],
        [0.25, 1.0, 0.5, 0.5, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.3333333333333333, 0.6666666666666666, 0.4, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3672735310083125, 0.4151337964564681],
        [1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.3333333333333333, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.2806449887048078, 0.7630410393499413],
        [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.6666666666666666, 0.2, 0.0, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.14407101784306545, 0.5671648050574738],
        [0.0, 0.0, 0.5, 0.75, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3333333333333333, 0.3333333333333333, 1.0, 0.75, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.46710325834534133, 0.1948180492756742],
        [0.25, 1.0, 0.5, 0.75, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.3333333333333333, 0.0, 0.7, 0.5, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.4907817953674927, 0.09779592766840879],
        [0.25, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.3333333333333333, 1.0, 0.6, 0.5, 0.8, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.05925688961927236, 0.1482149951816962],
        [0.0, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.8, 0.75, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.19045350786821155, 0.0790042188859228],
        [1.0, 0.0, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.5, 1.0, 0.8, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.32491842296217344, 0.588270161246332],
        [0.25, 0.0, 1.0, 0.75, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666666, 0.0, 0.4, 0.5, 0.2, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.23149743888223406, 0.485806163195778],

    ],
    meanResponseSet: [],
    meanBitMap: [],
    pixelCoordinates: [],
    bitmaps: [],
    researchQuestionFeeds: [
        // todo: add RQ feeds here
        {
            label: "Sandbox",
            info: "Would you recommend the provision of a sandbox environment?",
            variableIndexes: [
                0, 10, 12, 20, 22
            ],
            map: []
        }, {
            label: "B",
            info: '',
            variableIndexes: [
                1, 3, 5
            ],
            map: []
        }, {
            label: "C",
            info: '',
            variableIndexes: [
                2, 13, 17
            ],
            map: []
        }, {
            label: "D",
            info: '',
            variableIndexes: [
                8, 16, 34
            ],
            map: []
        }, {
            label: "E",
            info: '',
            variableIndexes: [
                7, 9, 19
            ],
            map: []
        }
    ],
    squareSize: 10,
    variableOffsets: []
};
function mapResultsMean() {
    data.packedVariableSets[0].forEach((v, i) => {
        let sum = 0;
        data.packedVariableSets.forEach(set => sum += set[i]);
        data.meanResponseSet[i] = sum / data.packedVariableSets.length;
    });
    console.log('response mean', data.meanResponseSet);
}
function mapMeanResponseSet() {
    data.meanBitMap = [];
    for (let idx = 0; idx < data.pixelCoordinates.length; idx++) {
        for (let p = 0; p < data.cardinalities[idx]; p++) {
            let pixel = {
                x: data.pixelCoordinates[idx][p].x,
                y: data.pixelCoordinates[idx][p].y,
                value: data.meanResponseSet[idx]
            };
            data.meanBitMap.push(pixel);
        }
    }
    console.log('mean bitmao', data.meanBitMap);
}
function mapResearchQuestions() {
    data.researchQuestionFeeds.forEach((feed) => {
        feed.map = [];
        for (let idx = 0; idx < data.pixelCoordinates.length; idx++) {
            const isActivePixel = feed.variableIndexes.indexOf(idx) >= 0;
            const pixelValue = isActivePixel ? 1 : 0; //1-data.meanBitMap[idx].value;
            for (let p = 0; p < data.cardinalities[idx]; p++) {
                let pixel = {
                    x: data.pixelCoordinates[idx][p].x,
                    y: data.pixelCoordinates[idx][p].y,
                    value: pixelValue
                };
                feed.map.push(pixel);
            }
        }
    })
}
function mapVariablePixels() {
    data.cardinalities.forEach((cardinality, v) => {
        const variableOffset = data.variableOffsets[v];
        const pixels = [];
        for (let c = 0; c < cardinality; c++) {
            const pixelOffset = variableOffset + c;
            const coordinates = {
                x: pixelOffset % data.squareSize + 1,
                y: Math.floor(pixelOffset / data.squareSize) + 1
            };
            pixels.push(coordinates);
        }
        data.pixelCoordinates.push(pixels);
    })
}
function mapVariableOffsets() {
    let variableOffset = 0;
    for (let i = 0; i < data.cardinalities.length; i++) {
        data.variableOffsets.push(variableOffset);
        variableOffset = data.variableOffsets[i] + data.cardinalities[i];
    }
}
function getAbsolutePixelValue(cardinality, value, index) {
    const variableValue = Math.round(value * 100) / 100;
    let pixelValue = (1 + index) / cardinality;
    pixelValue = Math.round(pixelValue  * 100) / 100;
    return pixelValue == variableValue ? 1 : 0;
}
function getProportionalPixelValue(cardinality, value, index) {
    const pixelValueProportion = 1 / cardinality;
    const valueThreshold = index * pixelValueProportion;
    let pixelValue = (value - valueThreshold) * cardinality;
    pixelValue = Math.round(pixelValue * 100) / 100;
    if (pixelValue < 0) {
        pixelValue = 0;
    }
    return pixelValue;
}
function unpackVariables() {
    function mapSet(set, map) {
        set.forEach((value, v) => {
            const cardinality = data.cardinalities[v];
            const isUnpackable = [2, 5].indexOf(cardinality) >= 0;
            const isQualitativeValue = !isUnpackable;
            for (let c = 0; c < cardinality; c++) {
                let pixel = {
                    x: data.pixelCoordinates[v][c].x,
                    y: data.pixelCoordinates[v][c].y,
                    value: 0
                };
                if (isUnpackable) {
                    pixel.value = getProportionalPixelValue(cardinality, value, c);
                } else if (isQualitativeValue) {
                    pixel.value = getProportionalPixelValue(cardinality, value, c); //getAbsolutePixelValue(cardinality, value, c);
                }
                map.push(pixel);
            }
        })
    }
    data.bitmaps = [];
    data.packedVariableSets.forEach((set) => {
        let map = [];
        data.bitmaps.push(map);
        mapSet(set, map);
    });
    data.contrastSets.forEach(contrast => {
        mapSet(contrast.set, contrast.map);
        console.log('contrast', contrast.name, contrast.map);
    });
}

mapVariableOffsets();
mapVariablePixels();
unpackVariables();
mapResultsMean();
mapMeanResponseSet();
mapResearchQuestions();
export type Pixel = {
    x: number,
    y: number,
    value: number
};
export default data;
